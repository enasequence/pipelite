package uk.ac.ebi.ena.sra.pipeline.launcher;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Test;

import uk.ac.ebi.ena.sra.pipeline.configuration.ProcessConfiguration;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.ExecutionResult;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.Stage;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.StageTask;

public class DetachedStageExecutorTest
{
    public static enum 
    TestStage implements Stage
    {
        OK1( TestTaskOK1.class ),
        OK2( TestTaskOK2.class ),
        TRANSIENT_ERROR( TestTaskTransientError.class ),
        PERMANENT_ERROR( TestTaskPermanentError.class );
        
        TestStage( Class<? extends StageTask>  klass )            
        {
            this.klass            = klass;
        }
              
        final private Class<? extends StageTask>  klass;
        
        public Class<? extends StageTask>
        getTaskClass()
        {
            return klass;
        }
        
        public String
        getDescription()
        {
            return "";
        }
         
        public Dependency[]
        getDependsOn()
        {
            return null;
        }
    }
    
    public static class 
    TestTaskOK1 implements StageTask
    {
        @Override
        public void 
        init( Object id, 
              boolean is_commit ) throws Throwable 
        {
        }

        @Override
        public void 
        execute() throws Throwable 
        {
            ;
        }

        @Override
        public void 
        unwind() 
        {
        }
    }

    public static class 
    TestTaskOK2 implements StageTask
    {
        @Override
        public void 
        init( Object id, 
              boolean is_commit ) throws Throwable 
        {
        }

        @Override
        public void 
        execute() throws Throwable 
        {
            throw new TestExceptionOK2();
        }

        @Override
        public void 
        unwind() 
        {
        }
    }

    public static class 
    TestTaskTransientError implements StageTask
    {
        @Override
        public void 
        init( Object id, 
              boolean is_commit ) throws Throwable 
        {
        }

        @Override
        public void 
        execute() throws Throwable 
        {
            throw new TestExceptionTransientError();
        }

        @Override
        public void 
        unwind() 
        {
        }
    }

    public static class 
    TestTaskPermanentError implements StageTask
    {
        @Override
        public void 
        init( Object id, 
              boolean is_commit ) throws Throwable 
        {
        }

        @Override
        public void 
        execute() throws Throwable 
        {
            throw new TestExceptionPermanentError();
        }

        @Override
        public void 
        unwind() 
        {
        }
    }
    
    public static class 
    TestExceptionOK2 extends Exception
    {
        private static final long serialVersionUID = 1L;
    }

    public static class 
    TestExceptionPermanentError extends Exception
    {
        private static final long serialVersionUID = 1L;        
    }

    public static class
    TestExceptionTransientError extends Exception
    {
        private static final long serialVersionUID = 1L;        
    }
    
    public enum 
    TestExecutionResult implements ExecutionResult
    { 
        OK_1( "OK_1", 0, null, RESULT_TYPE.SUCCESS ),
        OK_2( "OK_2", 1, TestExceptionOK2.class, RESULT_TYPE.SUCCESS ),
        TRANSIENT_ERROR( "TRANSIENT_ERROR", 2, TestExceptionTransientError.class, RESULT_TYPE.TRANSIENT_ERROR ),
        PERMANENT_ERROR( "PERMANENT_ERROR", 3, TestExceptionPermanentError.class, RESULT_TYPE.PERMANENT_ERROR );

        final String message;
        final RESULT_TYPE type;
        final byte exit_code;
        final Class<Throwable> cause;

        @SuppressWarnings( "unchecked" )
        TestExecutionResult( String message,
                int exit_code,
                Class<?> cause,
                RESULT_TYPE type )
        {
            this.message   = message;
            this.type      = type;
            this.exit_code = (byte)exit_code;
            this.cause     = (Class<Throwable>)cause;
        }

        @Override
        public RESULT_TYPE
        getType()
        {
            return type;
        }

        @Override
        public byte
        getExitCode()
        {
            return (byte)exit_code;
        }
        
        @Override
        public Class<Throwable>
        getCause()
        {
           return cause;
        }

        @Override
        public String
        getMessage()
        {
            return message;
        } 
    };
            
    @Test
    public void
    Test() throws Throwable
    {
        // Configuration file needed for DetachedStageExecutor.
        ProcessConfiguration configuration = new ProcessConfiguration( "pipelite", "detached.properties" );
        
        DetachedStageExecutor executor = new DetachedStageExecutor( configuration, new ResultTranslator( configuration.getExecutionResults() ) );

        ProcessInstance processInstance = null;        
        String process_id = "YOBA-PROCESS";

        // Test OK1
        {                                            
            StageInstance instance = new StageInstance( TestStage.OK1, process_id );          
            instance.setExecutionCount( 0l );
           
            ExecutionResult result = executor.execute( processInstance, instance );
                       
            assertNotNull( result );
            assertEquals( TestExecutionResult.OK_1, result );
        }

        // Test OK2
        {                                            
            StageInstance instance = new StageInstance(TestStage.OK2, process_id);          
            instance.setExecutionCount( 0l );
           
            ExecutionResult result = executor.execute( processInstance, instance );
    
            assertNotNull( result );
            assertEquals( TestExecutionResult.OK_2, result);
        }

        // Test TRANSIENT_ERROR
        {                                            
            StageInstance instance = new StageInstance(TestStage.TRANSIENT_ERROR, process_id);
            instance.setExecutionCount( 0l );
           
            ExecutionResult result = executor.execute( processInstance, instance );
            assertNotNull( result );
            assertEquals( TestExecutionResult.OK_2, result );
            System.out.println( executor.get_info().getStderr() );
        }
        
        // Test PERMANENT_ERROR
        {                                            
            StageInstance instance = new StageInstance(TestStage.PERMANENT_ERROR, process_id);
            instance.setExecutionCount( 0l );
           
            ExecutionResult result = executor.execute( processInstance, instance );
    
            assertNotNull( result );
            assertEquals( TestExecutionResult.OK_2, result);
        }
    }
}
