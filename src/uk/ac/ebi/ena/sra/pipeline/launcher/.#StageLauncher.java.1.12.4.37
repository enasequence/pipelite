package uk.ac.ebi.ena.sra.pipeline.launcher;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import uk.ac.ebi.ena.sra.pipeline.base.util.RemoteClient;
import uk.ac.ebi.ena.sra.pipeline.configuration.ConfigurationException;
import uk.ac.ebi.ena.sra.pipeline.configuration.ProcessConfiguration;
import uk.ac.ebi.ena.sra.pipeline.configuration.StageLauncherConfiguration;
import uk.ac.ebi.ena.sra.pipeline.launcher.StageInstance.ExecutionStatus;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.ExecutionResult;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.Process;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.Stage;
import uk.ac.ebi.ena.sra.pipeline.launcher.iface.StageTask;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.ParameterException;

public class 
StageLauncher
{   
    private final StageLauncherConfiguration configuration;
    private final Storage storage;
  
    private boolean forceLock;
    private boolean forceStage;   
    private boolean forceRemote;
    
    
    public static void
    main( String[] args )
    {
        Parameters params = new Parameters();        
        JCommander jc = new JCommander( params );

        try
        {
            jc.parse( args );

        } catch( ParameterException pe )
        {

            jc.usage();
            System.exit( 1 );
        }
        
        Storage storage = null;        
        try
        {
            ProcessConfiguration processConfiguration = new ProcessConfiguration( params.property_file );
            
            // Configuration properties from command line.
            
            processConfiguration.setCommit( !params.rollback );
            processConfiguration.setStageLauncherType( StageLauncherType.INTERNAL_STAGE_LAUNCHER );
            
            if( null != params.log_file )
            {
                StorageLog4jType log4jType = StorageLog4jType.FILE_LOG;
                log4jType.setFileName( params.log_file );
                processConfiguration.setLog4jType( log4jType );
            }
            
            if( params.storage_host    != null 
                && params.storage_port != null 
                && params.storage_name != null )
            {
                storage = new RemoteStorageStub( processConfiguration, 
                                                 (RemoteStorage) RemoteClient.getObject( params.storage_host, 
                                                                                         params.storage_port, 
                                                                                         params.storage_name ) );
            } else
            {            
                storage = new OracleStorage( processConfiguration );
            }
            
            
            Process process = storage.loadProcess();
            
            if( null == process )
            {
                String message = String.format( "Process definition does not exist" );
                storage.log( StorageLogLevel.ERROR, message );
                throw new ConfigurationException( message );             
            }           
                                    
            StageLauncherConfiguration stageLauncherConfiguration = new StageLauncherConfiguration( processConfiguration ); 
            
            StageLauncher stageLauncher = new StageLauncher( stageLauncherConfiguration, storage );
            
            stageLauncher.setForceLock( params.force_lock );
            stageLauncher.setForceStage( params.force_stage );
            
            ProcessInstance processInstance = new ProcessInstance( process, params.process_id );
            
            processInstance.loadStageInstances( storage );
            
            stageLauncher.execute( processInstance, 
                                   params.stage_name,
                                   params.storage_host, 
                                   params.storage_port, 
                                   params.storage_name );
            
        } catch( ConfigurationException e )
        {
            System.out.println( e.getMessage() );
            jc.usage();
            System.exit( 1 );
            
        } catch( StorageException e )
        {
            System.out.println( e.getMessage() );
            jc.usage();
            System.exit( 1 );
            
        } catch( Throwable e )
        {
            e.printStackTrace();
            System.exit( 1 );
            
        } finally
        {
            if( null != storage )
            {
                try
                {
                    storage.close();
                } 
                catch( StorageException e )
                {
                    e.printStackTrace();
                }
            }
        }
        
        System.exit( 0 );
    }
    
    public
    StageLauncher( StageLauncherConfiguration configuration,
                   Storage storage ) throws ConfigurationException
    {   
        this.configuration = configuration;
        this.storage = storage;
    }

    
    /*
     * @return true if the next stage can be executed.
     */
    public ExecutionResult
    execute( ProcessInstance processInstance, 
             String stageName,
             String storageHost,
             Integer storagePort,
             String storageName ) throws ConfigurationException, StorageException
    {                
        Process process = processInstance.getProcess();
        
        Stage stage = process.getStage( stageName );
        
        if( null == stage )
        {
            throw new ConfigurationException( String.format( "No stage with name [%s] found in process [%s]",
                                                             stageName,
                                                             configuration.getPipelineName() ) );
        }
               
        Storage storage = this.storage;
        
        if( forceRemote 
            && !( storage instanceof RemoteStorage ) 
            && null != storageHost 
            && null != storagePort 
            && null != storageName )
        {
            storage = new RemoteStorageStub( configuration.getProcessConfiguration(), 
                                             (RemoteStorage) RemoteClient.getObject( storageHost, 
                                                                                     storagePort, 
                                                                                     storageName ) );
        }
            
        StageInstance instance = processInstance.getStageInstance( stageName );

        if( ExecutionStatus.EXECUTABLE_STAGE != instance.getExecutionStatus( processInstance, configuration.getRedoCount(), forceStage ) )
        {
            throw new ConfigurationException( String.format( "Unable to execute stage [%s] in process [%s]",
                                                             stageName,
                                                             configuration.getPipelineName() ) );
        }
        
        if( StageLauncherType.INTERNAL_STAGE_LAUNCHER == configuration.getStageLauncherType() )
        {
            // Execute task.
            
            StageTask task = null;        
            Throwable exception = null;
            ExecutionResult result = null;
            
            try
            {
                task = instance.getStageTask();
                task.init( instance.getProcessID(), configuration.isCommit() );
                task.execute();
             
            } catch( Throwable e )
            {
                storage.log( StorageLogLevel.INFO, processInstance, instance, e );
                exception = e;
                
            } finally
            {
                result = process.getExecutionResult( exception );
                
                if( null != task )
                    task.unwind();
            }
                        
            instance.setExecutionResult( result );
            instance.setResultDate( new Timestamp( System.currentTimeMillis() ) );
            
            if( null != exception )
            {
                StringWriter stackTrace = new StringWriter();
                exception.printStackTrace(new PrintWriter( stackTrace ));
                instance.setResultException( stackTrace.toString() );
            }
            
            instance.setExecutionCount( instance.getExecutionCount() + 1 );
            
            // Save instance.            
            storage.saveStageInstance( instance );
            
            return result; 
        }
        
        String propertyFile = null;
        
        Timestamp executionDate = new Timestamp( System.currentTimeMillis() ) ;
        
        if( StageLauncherType.LSF_STAGE_LAUNCHER == configuration.getStageLauncherType() 
            || StageLauncherType.DETACHED_STAGE_LAUNCHER == configuration.getStageLauncherType() )
        { 
            // Prepare property file for external stage launcher.
            
            SimpleDateFormat dateFormat = new SimpleDateFormat( "yyyy-MM-dd-HH-mm-ss" );

            propertyFile = String.format( "%s%s--%s--%s--%s", configuration.getTempDir(),
                                                              configuration.getPipelineName(),
                                                              processInstance.getProcessID(),
                                                              stageName,
                                                              dateFormat.format( executionDate ) );
                        
            storage.log( StorageLogLevel.INFO, processInstance, instance, String.format( "Creating property file for external stage launcher: [%s]", propertyFile ) );

            try
            {
                configuration.saveProcessConfiguration( propertyFile );
            } catch( ConfigurationException e )
            {
                String message = String.format( "Failed to create property file for external stage launcher: [%s]", propertyFile );
                storage.log( StorageLogLevel.ERROR, processInstance, instance, message );                
                throw new ConfigurationException( message, e );
            }
        }
              
        ExternalLauncher externalLauncher = null;

        Integer lsfMemory = ( null != instance.getStage().getResourceMemory() ) ? instance.getStage().getResourceMemory() : configuration.getResourceMemory();  
        Integer lsfCPU = ( null != instance.getStage().getResourceCPU() ) ? instance.getStage().getResourceMemory() : configuration.getResourceCPU(); 
                        
        if( StageLauncherType.LSF_STAGE_LAUNCHER == configuration.getStageLauncherType() )
        {                
            externalLauncher = new LSFStageLauncher( storage, 
                                                     processInstance, 
                                                     instance, 
                                                     configuration.isCommit(), 
                                                     propertyFile,
                                                     storageHost, 
                                                     storagePort,
                                                     storageName,
                                                     configuration.getResourceQueue(), 
                                                     lsfMemory,
                                                     lsfCPU,
                                                     configuration.getMailTo() );
            
        } else if( StageLauncherType.DETACHED_STAGE_LAUNCHER == configuration.getStageLauncherType() )
        {
            externalLauncher = new DetachedStageLauncher( storage, 
                                                          processInstance, 
                                                          instance, 
                                                          configuration.isCommit(), 
                                                          propertyFile,
                                                          storageHost, 
                                                          storagePort,
                                                          storageName );
            
        } else if ( StageLauncherType.LSF_SCRIPT_LAUNCHER == configuration.getStageLauncherType() )
        {
            externalLauncher = new LSFScriptLauncher( storage, 
                                                      processInstance, 
                                                      instance, 
                                                      configuration.isCommit(), 
                                                      stage.getCommand(),
                                                      configuration.getResourceQueue(), 
                                                      lsfMemory,
                                                      lsfCPU,
                                                      configuration.getMailTo() );
            
        } else if ( StageLauncherType.DETACHED_SCRIPT_LAUNCHER == configuration.getStageLauncherType() )
        {
            externalLauncher = new DetachedScriptLauncher( storage, 
                                                           processInstance, 
                                                           instance, 
                                                           configuration.isCommit(),
                                                           stage.getCommand() );
            
        } else
        {
            throw new ConfigurationException( "Unsupported launcher type" );
        }
        
        ExternalLauncherResult externalResult = externalLauncher.execute();

        if( externalLauncher instanceof ExternalStageLauncher )
        {   
            // If successfully executed then stage instance has been changed by internal stage executor.
            instance.update( storage.loadStageInstance( stage, processInstance ) );
        }
        
        boolean isSuccess = ( 0 == externalResult.getExitCode() );            

        if( !isSuccess )
        {
            // If not successfully executed then set the execution result to execution failure 
            // and increase execution count.
            
            instance.setExecutionResult( Process.EXECUTION_FAILURE );
            instance.setExecutionCount( instance.getExecutionCount() + 1 );
        }           
        
        if( externalLauncher instanceof ExternalScriptLauncher )
        {
            if( isSuccess )
            {
                // If a script was successfully executed then set the execution result to default success.
                instance.setExecutionResult( Process.DEFAULT_SUCCESS );            
            }
            instance.setResultDate( new Timestamp( System.currentTimeMillis() ) );
        }

        instance.setExecutionDate( executionDate );
        instance.setExecutionStderr( externalResult.getStderr() );
        instance.setExecutionStdout( externalResult.getStdout() );
            
        instance.setResourceHost( externalResult.getHost() );
        instance.setResourceJob( externalResult.getJob() );
                        
        storage.saveStageInstance( instance ); // Save stage instance.
        
                        
        return instance.getExecutionResult();            
    }   
    
    
    public boolean
    isForceLock()
    {
        return forceLock;
    }    
    

    public void
    setForceLock( boolean forceLock )
    {
        this.forceLock = forceLock;
    }
    

    public boolean
    isForceStage()
    {
        return forceStage;
    }    

    
    public void
    setForceStage( boolean forceStage )
    {
        this.forceStage = forceStage;
    }
    
    
    public boolean
    isForceRemote()
    {
        return forceRemote;
    }

    
    public void
    setForceRemote( boolean forceRemote )
    {
        this.forceRemote = forceRemote;
    }

        
    static final String PARAMETERS_NAME_ID                     = "--id";
    static final String PARAMETERS_NAME_STAGE                  = "--stage";
    static final String PARAMETERS_NAME_PROPERTY_FILE          = "--property-file";
    static final String PARAMETERS_NAME_LOG_FILE               = "--log-file";
    static final String PARAMETERS_NAME_ROLLBACK               = "--rollback";
    static final String PARAMETERS_NAME_FORCE_LOCK             = "--force-lock";
    static final String PARAMETERS_NAME_FORCE_STAGE            = "--force-stage";
    static final String PARAMETERS_NAME_STORAGE_HOST           = "--storage-host";    
    static final String PARAMETERS_NAME_STORAGE_PORT           = "--storage-port";    
    static final String PARAMETERS_NAME_STORAGE_NAME           = "--storage-name";    
    
    static final String PARAMETERS_DESCRIPTION_ID              = "Process ID";    
    static final String PARAMETERS_DESCRIPTION_STAGE           = "Stage name to execute";
    static final String PARAMETERS_DESCRIPTION_PROPERTY_FILE   = "Property file name";
    static final String PARAMETERS_DESCRIPTION_LOG_FILE        = "Log file name";
    static final String PARAMETERS_DESCRIPTION_ROLLBACK        = "Changes are not committed";
    static final String PARAMETERS_DESCRIPTION_FORCE_LOCK      = "Forces removal of existing locks";
    static final String PARAMETERS_DESCRIPTION_FORCE_STAGE     = "Forces execution of stage";
    static final String PARAMETERS_DESCRIPTION_STORAGE_HOST    = "The host of the remote storage service";    
    static final String PARAMETERS_DESCRIPTION_STORAGE_PORT    = "The port of the remote storage service"; 
    static final String PARAMETERS_DESCRIPTION_STORAGE_NAME    = "The name of the remote storage service";
        
    
    static class
    Parameters
    {
        @Parameter( names = PARAMETERS_NAME_ID, description = PARAMETERS_DESCRIPTION_ID, required = true )
        String process_id;

        @Parameter( names = PARAMETERS_NAME_STAGE, description =  PARAMETERS_DESCRIPTION_STAGE, required = true )
        String stage_name;
        
        @Parameter( names = PARAMETERS_NAME_PROPERTY_FILE, description = PARAMETERS_DESCRIPTION_PROPERTY_FILE, required = true )
        String property_file; 
        
        @Parameter( names = PARAMETERS_NAME_LOG_FILE, description = PARAMETERS_DESCRIPTION_LOG_FILE )
        String log_file; 
        
        @Parameter( names = PARAMETERS_NAME_FORCE_LOCK, description = PARAMETERS_DESCRIPTION_FORCE_LOCK )
        boolean force_lock = false;

        @Parameter( names = PARAMETERS_NAME_FORCE_STAGE, description = PARAMETERS_DESCRIPTION_FORCE_STAGE )
        boolean force_stage = false;
        
        @Parameter( names = PARAMETERS_NAME_ROLLBACK, description = PARAMETERS_DESCRIPTION_ROLLBACK )
        boolean rollback = false;      
        
        @Parameter( names = PARAMETERS_NAME_STORAGE_HOST, description = PARAMETERS_DESCRIPTION_STORAGE_HOST, hidden = true )
        String storage_host;      

        @Parameter( names = PARAMETERS_NAME_STORAGE_PORT, description = PARAMETERS_DESCRIPTION_STORAGE_PORT, hidden = true )
        Integer storage_port;      

        @Parameter( names = PARAMETERS_NAME_STORAGE_NAME, description = PARAMETERS_DESCRIPTION_STORAGE_NAME, hidden = true )
        String storage_name;              
    }    
}
